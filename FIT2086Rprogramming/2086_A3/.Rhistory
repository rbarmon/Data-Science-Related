?dbinom():
?dbinom()
?ppois()
ppois(1,4)
(4**2 * exp(-4))/factorial(1)
(4^0 * exp(-4))/factorial(0)
(4^0 * exp(-4))/factorial(0) + (4^1 * exp(-4))/factorial(1)
?dpois
dppois(1,4)
dpois(1,4)
dpois(2,4)
ppois(2,4)
ms.measured = read.csv("ms.measured.2023.csv")
ms.truth = read.csv("ms.truth.2023.csv")
library(kknn)
library(boot)
#k = 1, . . . , 25,
k <- 1:25
y <- c()
setwd("/Users/rianb/FIT2086Rprogramming/2086_A3")
ms.measured = read.csv("ms.measured.2023.csv")
ms.truth = read.csv("ms.truth.2023.csv")
library(kknn)
library(boot)
#k = 1, . . . , 25,
k <- 1:25
y <- c()
for (i in k){
# use k-NN to estimate the values of the spectrum at each of the MZ values in ms.truth$MZ.
ytest.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=i) )
#compute the mean-squared error between your estimates of the spectrum, and the true values in ms.truth$intensity.
ms-error = mean((ytest.hat - ms.truth$intensity)^2)
#get values for plot
y = c(y,ms-error)
}
for (i in k){
# use k-NN to estimate the values of the spectrum at each of the MZ values in ms.truth$MZ.
ytest.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=i) )
#compute the mean-squared error between your estimates of the spectrum, and the true values in ms.truth$intensity.
ms.error = mean((ytest.hat - ms.truth$intensity)^2)
#get values for plot
y = c(y,ms.error)
}
y <- c(1:25)
y <- c()
for (i in k){
# use k-NN to estimate the values of the spectrum at each of the MZ values in ms.truth$MZ.
ytest.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=i) )
#compute the mean-squared error between your estimates of the spectrum, and the true values in ms.truth$intensity.
ms.error = mean((ytest.hat - ms.truth$intensity)^2)
#get values for plot
y = c(y,ms.error)
}
x <- c(1:25)
#Produce a plot of these errors against the various values of k
plot(x,y, xlab='k', ylab='mean-squared error', main='Mean-squared error for each value of k = 1, . . . , 25')
#k = 2
k2.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=2) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='mass-to-charge ratio', ylab='intensity of the ions', main='True vs Estimated Spectrum produced by the k-NN method for k=2', type='l', col'red')
lines(ms.measured$MZ, ms.measured$intensity, type='l', col'blue')
#k = 2
k2.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=2) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='mass-to-charge ratio', ylab='intensity of the ions', main='True vs Estimated Spectrum produced by the k-NN method for k=2', type='l', col='red')
lines(ms.measured$MZ, ms.measured$intensity, type='l', col='blue')
lines(ms.truth$MZ, k2.hat, type='l', col='black')
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'))
col=c('blue','red','black'), lwd=2, lty=c(1,1))
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('blue','red','black'), lwd=2, lty=c(1,1)))
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('blue','red','black'), lwd=2, lty=c(1,1))
#k = 2
k2.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=2) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='mass-to-charge ratio', ylab='intensity of the ions', main='True vs Estimated Spectrum produced by the k-NN method for k=2', type='l', col='orange')
lines(ms.measured$MZ, ms.measured$intensity, type='l', col='blue')
lines(ms.truth$MZ, k2.hat, type='l', col='black')
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('blue','orange','black'), lwd=2, lty=c(1,1))
#k = 2
k2.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=2) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='Mass/Charge (MZ)', ylab='Relative Intensity', main='True vs Estimated Spectrum produced by the k-NN method for k=2', type='l', col='orange')
lines(ms.measured$MZ, ms.measured$intensity, type='l', col='blue')
lines(ms.truth$MZ, k2.hat, type='l', col='black')
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('blue','orange','black'), lwd=2, lty=c(1,1))
#k = 5
k5.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=5) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='Mass/Charge (MZ)', ylab='Relative Intensity', main='True vs Estimated Spectrum produced by the k-NN method for k=5', type='l', col='orange')
lines(ms.measured$MZ, ms.measured$intensity, type='l', col='blue')
lines(ms.truth$MZ, k5.hat, type='l', col='black')
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('blue','orange','black'), lwd=2, lty=c(1,1))
#k = 10
k10.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=10) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='Mass/Charge (MZ)', ylab='Relative Intensity', main='True vs Estimated Spectrum produced by the k-NN method for k=10', type='l', col='orange')
lines(ms.measured$MZ, ms.measured$intensity, type='l', col='blue')
lines(ms.truth$MZ, k10.hat, type='l', col='black')
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('blue','orange','black'), lwd=2, lty=c(1,1))
#k = 25.
k25.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=25) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='Mass/Charge (MZ)', ylab='Relative Intensity', main='True vs Estimated Spectrum produced by the k-NN method for k=25', type='l', col='orange')
lines(ms.measured$MZ, ms.measured$intensity, type='l', col='blue')
lines(ms.truth$MZ, k25.hat, type='l', col='black')
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('blue','orange','black'), lwd=2, lty=c(1,1))
k2.ms.error = mean((k2.hat - ms.truth$intensity)^2)
k5.ms.error = mean((k5.hat - ms.truth$intensity)^2)
k10.ms.error = mean((k10.hat - ms.truth$intensity)^2)
k25.ms.error = mean((k25.hat - ms.truth$intensity)^2)
mean((k2.hat - ms.truth$intensity)^2)
mean((k5.hat - ms.truth$intensity)^2)
mean((k10.hat - ms.truth$intensity)^2)
mean((k25.hat - ms.truth$intensity)^2)
k6.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=6) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='Mass/Charge (MZ)', ylab='Relative Intensity', main='True vs Estimated Spectrum produced by the k-NN method for k=6', type='l', col='orange')
lines(ms.truth$MZ, k25.hat, type='l', col='black')
legend('topright', legend=c('training data points', 'true spectrum', 'estimated spectrum'),
col=c('orange','black'), lwd=2, lty=c(1,1))
legend('topright', legend=c('true spectrum', 'estimated spectrum'),
col=c('orange','black'), lwd=2, lty=c(1,1))
k6.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=6) )
plot(ms.truth$MZ,ms.truth$intensity, xlab='Mass/Charge (MZ)', ylab='Relative Intensity', main='True vs Estimated Spectrum produced by the k-NN method for k=6', type='l', col='orange')
lines(ms.truth$MZ, k25.hat, type='l', col='black')
legend('topright', legend=c('true spectrum', 'estimated spectrum'),
col=c('orange','black'), lwd=2, lty=c(1,1))
knn = train.kknn(intensity ~ ., data = ms.measured, kmax=25, kernel=optimal)
knn = train.kknn(intensity ~ ., data = ms.measured, kmax=25, kernel='optimal')
knn$best.parameters$k
mean((k6.hat - ms.truth$intensity)^2)
k7.hat = fitted(kknn(intensity ~ ., ms.measured, ms.truth,kernel = "optimal", k=7) )
mean((k7.hat - ms.truth$intensity)^2)
#3.5
#Use the cross-validation functionality in the kknn package to select an estimate of the best value of k (make sure you still use the optimal kernel).
knn = train.kknn(intensity ~ ., data = ms.measured, kmax=25, kernel='optimal')
knn$best.parameters$k
#3.6
k6.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth,kernel = 'optimal', k = 6) )
mean = mean(k6.hat-ms.measured$intensity)
actual = k6.hat-ms.measured$intensity
sqrt(sum((actual - mean)^2)/(501-1))
max.estimate = which.max(k6.hat)
max.estimate
View(ms.truth)
ms.truthmax.estimate]
ms.truth[max.estimate]
ms.truth[max.estimate,1]
ms.truth$MZ[max.estimate]
ms.truth$MZ[max.estimate]
#3.6
k6.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth,kernel = 'optimal', k = 6) )
mean = mean(k6.hat-ms.measured$intensity)
actual = k6.hat-ms.measured$intensity
sqrt(sum((actual - mean)^2)/(501-1))
sqrt(sum((actual - mean)^2)/(443-1))
mean
actual
sqrt(sum((actual - mean)^2)/(443-1))
library(boot)
boot.auc = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
# Compute the AUC and return it
target = ms.truth[which.max(k6.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.max, R=5000, value= 3)
library(boot)
bs = boot(data=ms.measured, statistic=boot.max, R=5000, value= 3)
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
# Compute the AUC and return it
target = ms.truth[which.max(k6.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 3)
boot.ci(bs,conf=0.95,type="bca")
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 6)
boot.ci(bs,conf=0.95,type="bca")
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 20)
boot.ci(bs,conf=0.95,type="bca")
ms.truth[which.max(k6.hat),]
ms.truth[which.max(k6.hat)]
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k3.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 3)
boot.ci(bs,conf=0.95,type="bca")
#3.8
#Using the bootstrap procedure (use at least 5, 000 bootstrap replications)
k3.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth, kernel = 'optimal', k = 3) )
k6.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth, kernel = 'optimal', k = 6) )
k20.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth, kernel = 'optimal', k = 20) )
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k3.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 3)
boot.ci(bs,conf=0.95,type="bca")
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k3.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 3)
boot.ci(bs,conf=0.95,type="bca")
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 6)
boot.ci(bs,conf=0.95,type="bca")
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k20.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k6.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 6)
boot.ci(bs,conf=0.95,type="bca")
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k20.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 20)
boot.ci(bs,conf=0.95,type="bca")
#3.8
#Using the bootstrap procedure (use at least 5, 000 bootstrap replications)
k3.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth, kernel = 'optimal', k = 3) )
k6.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth, kernel = 'optimal', k = 6) )
k20.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth, kernel = 'optimal', k = 20) )
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k6.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 3)
boot.ci(bs,conf=0.95,type="bca")
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 6)
boot.ci(bs,conf=0.95,type="bca")
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 20)
boot.ci(bs,conf=0.95,type="bca")
boot.abu = function(data, indices, value)
{
# Create a bootstrapped version of our data
d = data[indices,]
target = ms.truth[which.max(k6.hat),]
rv = fitted( kknn(intensity ~ ., d, target, kernel = 'optimal', k = value) )
return(rv)
}
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 3)
boot.ci(bs,conf=0.95,type="basic")
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 6)
boot.ci(bs,conf=0.95,type="basic")
bs = boot(data=ms.measured, statistic=boot.abu, R=5000, value= 20)
boot.ci(bs,conf=0.95,type="basic")
sqrt(mean((k6.hat-ms.measured$intensity)^2))
sqrt(sum((actual - mean)^2)/(443-1))
sqrt(sum((actual - mean)^2)/(443))
#3.6
#Apply standard deviation formula
k6.hat = fitted( kknn(intensity ~ ., ms.measured, ms.truth,kernel = 'optimal', k = 6) )
mean = mean(k6.hat-ms.measured$intensity)
val = k6.hat-ms.measured$intensity
sqrt(sum((val - mean)^2)/(443-1))
ms.truth$MZ[max.estimate]
