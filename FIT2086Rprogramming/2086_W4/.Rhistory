?dbinom():
?dbinom()
?ppois()
ppois(1,4)
(4**2 * exp(-4))/factorial(1)
(4^0 * exp(-4))/factorial(0)
(4^0 * exp(-4))/factorial(0) + (4^1 * exp(-4))/factorial(1)
?dpois
dppois(1,4)
dpois(1,4)
dpois(2,4)
ppois(2,4)
getwd()
setwd(/Users/rianb/Rprogramming/2086A1)
setwd("/Users/rianb/Rprogramming/2086A1")
setwd("/Users/rianb/Rprogramming/2086_A1")
covid <- read.csv("covid.2023.csv", header = TRUE)
View(covid)
View(covid)
covid?
View(covid)
lambda_estimate <- function(x)
{
n = length(x)
# Calculate the sample mean
retval$mu_ml = sum(X)/n
lambda_hat = sum(X)/n
print(lambda_hat)
return(retval)
}
covid <- read.csv("covid.2023.csv", header = TRUE)
est = lambda_estimate(covid$Days)
lambda_estimate <- function(x)
{
n = length(x)
# Calculate the sample mean
retval$mu_ml = sum(x)/n
lambda_hat = sum(x)/n
print(lambda_hat)
return(retval)
}
covid <- read.csv("covid.2023.csv", header = TRUE)
est = lambda_estimate(covid$Days)
retval = list()
retval = list()
lambda_estimate <- function(x)
{
n = length(x)
retval = list()
# Calculate the sample mean
retval$mu_ml = sum(x)/n
lambda_hat = sum(x)/n
print(lambda_hat)
return(retval)
}
covid <- read.csv("covid.2023.csv", header = TRUE)
est = lambda_estimate(covid$Days)
mean(covid$Days)
lambda <- mean(covid$Days)
ppois(10,lambda)
table(covid)
ppois(10,lambda)
ppois(80,lambda*5) - ppois(59,lambda*5)
ppois(80,lambda) - ppois(59,lambda)
ppois(40,lambda*5) - ppois(29,lambda*5)
ppois(80,lambda)
ppois(59,lambda)
ppois(14,lambda)
ppois(11,lambda)
order(dpois(0:40, lambda = estimated_lambda), decreasing = TRUE)[1:3]
order(dpois(0:40, lambda), decreasing = TRUE)[1:3]
dpois(60:80, lambda = estimated_lambda)
dpois(60:80, lambda)
sum(dpois(60:80, lambda))
train <- read.csv("train.csv")
plot(x=train$heights, y=rep(0,10), ylim=c(0,6), xlim=c(1.4,2),
ylab="p(heights)", xlab="Heights")
xv = seq(from=1.4, to=2, length.out=100)
lines(xv, dnorm(xv, est$mu_ml, sqrt(est$var_ml)), lwd=2.5, col="red")
est = my_estimates(train$heights)
my_estimates <- function(X)
{
n = length(X)
retval = list()
# Calculate the sample mean
retval$mu_ml = sum(X)/n
# Calculate the squared deviations around the mean
e2 = (X - retval$m)^2
# Calculate the two estimates of variance
retval$var_ml = sum(e2)/n
retval$var_u  = sum(e2)/(n-1)
return(retval)
}
est = my_estimates(train$heights)
est$mu_ml
est$var_ml
est$var_u
sqrt(est$var_ml)
sqrt(est$var_u)
xv = seq(from=1.4, to=2, length.out=100)
lines(xv, dnorm(xv, est$mu_ml, sqrt(est$var_ml)), lwd=2.5, col="red")
lines(xv, dnorm(xv, est$mu_ml, sqrt(est$var_u)), lwd=2.5, col="blue")
legend(x=1.75,y=6,c("Samples","ML Estimate","Unbiased Estimate"), lty=c(0,1,1),
pch=c("o","",""), col=c("black","red","blue"), lwd=c(1,2.5,2.5))
plot?
help('plot')
plot(x=covid$Days, y=rep(0,10), ylim=c(0,100), xlim=c(0,40),
plot(x=covid$Days, y=rep(0,10), ylim=c(0,100), xlim=c(0,40),
ylab="Number of Patients", xlab="Days to Recover")
train
plot(x=covid$Days, y=rep(0,1000), ylim=c(0,100), xlim=c(0,40),
ylab="Number of Patients", xlab="Days to Recover")
xv = seq(from=0, to=40, length.out=100)
help('seq')
seq(from=0, to=40, length.out=100)
xv = seq(from=0, to=40, length.out=1000)
seq(from=0, to=40, length.out=1000)
View(train)
qnorm(1-0.20/2)
qt(p=1-0.05//2,df=4)
qt(p=1-0.05/2,df=4)
qt(p=1-0.05/2,df=9)
qt(p=1-0.05/2,df=99)
qt(p=1-0.05/2,df=999)
souce("CIunknownvar.R)")
souce("CIunknownvar.R")
calcCI <- function(y, alpha)
{
n = length(y)
retval = list()
# Simple error checking
if (alpha <= 0 || alpha >= 1)
{
stop("Alpha must be a value greater than 0 and less than 1")
}
# Calculate the sample mean and (unbiased) estimate of variance
retval$mu.hat = mean(y)
# the "var()" function returns the unbiased estimate of variance
retval$sigma2.hat = var(y)
# Calculate the multiplier for our CI based on t-distribution (unknown variance CI)
t = qt(1-alpha/2, n-1)
# return the interval
retval$CI = retval$mu.hat + c(-t * sqrt(retval$sigma2.hat/n),
t * sqrt(retval$sigma2.hat/n))
return(retval)
}
getwd()
setwd("/Users/rianb/Rprogramming/2086_W4")
getwd()
souce("CIunknownvar.R")
train = read.csv("train.csv")
est = calcCI(train$heights, 0.05)
est$mu.hat
est$
CI
test = read.csv("test.csv")
esttest = calcCI(test$heights, 0.05)
esttest$mu.hat
s&p = read.csv("S&P500.csv")
sp = read.csv("SP500.csv")
plot((SP500$Index), type="l", xlab="Week since 7th September, 2007", ylab="S&P Index", lwd=2.5)
plot((sp$Index), type="l", xlab="Week since 7th September, 2007", ylab="S&P Index", lwd=2.5)
plot((sp$Index), type="l", xlab="Week since 7th September, 2007", ylab="S&P Index", lwd=5)
plot((sp$Index), type="l", xlab="Week since 7th September, 2007", ylab="S&P Index", lwd=1)
plot((sp$Index), type="l", xlab="Week since 7th September, 2007", ylab="S&P Index")
plot((sp$Index), type="l", xlab="Week since 7th September, 2007", ylab="S&P Index", lwd=2.5)
plot((sp$Index), type="l", xlab="Week since 7th September, 2007", ylab="S&P Index")
sp
View(sp)
lines(x=59:108,y=SP500$Index[59:108], col="red", lwd=2.5)
lines(x=59:108,y=sp$Index[59:108], col="red", lwd=2.5)
y1 = SP500$Index[1:58]
y1 = sp$Index[1:58]
y2 = sp$Index[59:108]
estG1 = calcCI(y1, alpha=0.05)
estG1
estG2 = calcCI(y2, alpha=0.05)
estG2
n1 = length(y1)
n2 = length(y2)
# first get the difference
diff = estG1$mu.hat - estG2$mu.hat
# get the standard error of the difference
se.diff = sqrt( estG1$sigma2.hat/n1 + estG2$sigma2.hat/n2 )
# calculate the 95% CI
CI.diff = diff + c(-1.96*se.diff, 1.96*se.diff)
diff
CI.diff
1407.173 - 910.6978
